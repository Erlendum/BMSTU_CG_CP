/**
 * @file test_model.h
 * @author Glotov Ilya (glotovia@student.bmstu.ru)
 * @brief Файл интерфейса класса TestModel
 * @version 1.0
 * @date 2022-11-27
 *
 * @copyright Copyright (c) 2022
 *
 */

#ifndef TESTMODEL_H
#define TESTMODEL_H

#include "model.h"
#include <QObject>

/*!
    @brief Класс, представляющий тестирование класса Model
    @details
    Пересечение луча с моделью:\n
    Тест №1 - проверяется пересечение луча с одним полигоном, центр котрого расположен в начале координат, а луч также проходит через начало координат
    перпендикулярно плоскости полигона\n
    Тест №2 - проверяется пересечение луча с одним полигоном, центр котрого расположен в начале координат, а луч
    проходит через точку полиона с наибольшим значением x\n
    Тест №3 - проверяется пересечение луча с одним полигоном, центр котрого расположен в начале координат, а луч
    проходит через точку полиона с наименьшим значением x\n
    Тест №4 - проверяется пересечение луча с одним полигоном, центр котрого расположен в начале координат, а луч
    проходит через точку полиона с наибольшим значением y\n
    Тест №5 - проверяется пересечение луча с одним полигоном, центр котрого расположен в начале координат, а луч
    проходит через точку полиона с наименьшим значением y\n
    Загрузка модели из файла формата OBJ:\n
    Тест №1 - загрузка модели из несуществующего файла\n
    Тест №2 - загрузка модели с полигонами-треугольниками\n
    Тест №3 - загрузка модели с полигонами, не являющимися треугольниками (проверка триангуляции)\n
    Перемещение модели:\n
    Тест №1 - перемещение на на вектор (1, 1, 1)\n
    Масштабирование модели:\n
    Тест №1 - масштабирование (2, 2, 2)\n
    Тест №2 - масштабирование (2, 2, 2) относительно указанного центра\n
    Поворот модели:\n
    Тест №1 - поворот модели на (90, 90, 90) \n
    Тест №2 - поворот модели на (90, 90, 90) относительно указанного центра\n
    Сохранение модели в файл формата OBJ:\n
    Тест №1 - сохранение модели с четырьмя вершинами и двумя полигонами без материала\n
*/
class TestModel : public QObject {
    Q_OBJECT
public:
    /*!
        @brief Конструктор
        @param [IN] parent - родительский класс QWidget
        @return Объект класса
    */
    explicit TestModel(QObject* parent = nullptr);

private slots:
    void test_01_intersection();
    void test_02_intersection();
    void test_03_intersection();
    void test_04_intersection();
    void test_05_intersection();

    void test_01_load();
    void test_02_load();
    void test_03_load();

    void test_01_move();

    void test_01_scale();
    void test_02_scale();

    void test_01_rotate();
    void test_02_rotate();

    void test_01_save();
};

#endif // TESTMODEL_H
